# module ENV
#   extend Enumerable[[String, String]]
#
#   # def self.[]: (::String) -> (::String | nil)
#   # def self.[]=: (::String, ::String) -> ::String
#   # def self.fetch: [A] (key: ::String, default: A) -> (A | ::String)
#   # def self.fetch: (key: ::String) ?{ ::String -> A } -> (::String | A)
#   # def self.delete: (::String) -> (::String | nil)
#   # def self.key?: (::String) -> bool
#   # def self.clear: () -> void
#   # def self.to_h: () -> Hash[::String, ::String]
#   # def self.each: () { (::String, ::String) -> void } -> void
#   # def self.each_key: () { (::String) -> void } -> void
#   # def self.each_value: () { (::String) -> void } -> void
#   # def self.keys: () -> Array[::String]
#   # def self.values: () -> Array[::String]
# end
